/** @typedef {typeof __propDef.props}  SelectProps */
/** @typedef {typeof __propDef.events}  SelectEvents */
/** @typedef {typeof __propDef.slots}  SelectSlots */
export default class Select extends SvelteComponentTyped<{
    getOptionLabel?: (option: any, filterText: any) => any;
    filterText?: string;
    input?: any;
    Item?: typeof _Item;
    VirtualList?: any;
    optionIdentifier?: string;
    noOptionsMessage?: string;
    hideEmptyState?: boolean;
    value?: any;
    isMulti?: boolean;
    getGroupHeaderLabel?: (option: any) => any;
    items?: any;
    itemHeight?: number;
    listPlacement?: string;
    listAutoWidth?: boolean;
    listOffset?: number;
    isDisabled?: boolean;
    multiFullItemClearable?: boolean;
    getSelectionLabel?: (option: any) => any;
    ClearIcon?: typeof _ClearIcon;
    loadOptions?: any;
    groupBy?: any;
    isCreatable?: boolean;
    itemFilter?: (label: any, filterText: any) => boolean;
    id?: any;
    justValue?: any;
    List?: typeof _List;
    Selection?: typeof _Selection;
    filter?: typeof _filter;
    getItems?: typeof _getItems;
    Multi?: typeof _Multi;
    ChevronIcon?: typeof _ChevronIcon;
    LoadingIcon?: typeof _LoadingIcon;
    Icon?: any;
    container?: any;
    isFocused?: boolean;
    placeholder?: string;
    placeholderAlwaysShow?: boolean;
    groupFilter?: (groups: any) => any;
    isGroupHeaderSelectable?: boolean;
    labelIdentifier?: string;
    hasError?: boolean;
    containerStyles?: string;
    createGroupHeaderItem?: (groupValue: any, item: any) => {
        value: any;
        label: any;
    };
    createItem?: (filterText: any) => {
        value: any;
        label: any;
    };
    getFilteredItems?: () => any;
    isSearchable?: boolean;
    inputStyles?: string;
    isClearable?: boolean;
    isWaiting?: boolean;
    listOpen?: boolean;
    debounce?: (fn: any, wait?: number) => void;
    debounceWait?: number;
    inputAttributes?: {};
    iconProps?: {};
    showChevron?: boolean;
    suggestions?: any;
    class?: string;
    handleClear?: () => void;
    ariaValues?: (values: any) => string;
    ariaListOpen?: (label: any, count: any) => string;
    ariaFocused?: () => string;
}, {
    change: CustomEvent<any>;
    clear: CustomEvent<any>;
    focus: CustomEvent<any>;
    blur: CustomEvent<any>;
    select: CustomEvent<any>;
    itemCreated: CustomEvent<any>;
} & {
    [evt: string]: CustomEvent<any>;
}, {}> {
    get getFilteredItems(): () => any;
    get handleClear(): () => void;
}
export type SelectProps = typeof __propDef.props;
export type SelectEvents = typeof __propDef.events;
export type SelectSlots = typeof __propDef.slots;
import _Item from "./Item.svelte";
import _ClearIcon from "./ClearIcon.svelte";
import _List from "./List.svelte";
import _Selection from "./Selection.svelte";
import _filter from "./filter";
import _getItems from "./get-items";
import _Multi from "./Multi.svelte";
import _ChevronIcon from "./ChevronIcon.svelte";
import _LoadingIcon from "./LoadingIcon.svelte";
import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        getOptionLabel?: (option: any, filterText: any) => any;
        filterText?: string;
        input?: any;
        Item?: typeof _Item;
        VirtualList?: any;
        optionIdentifier?: string;
        noOptionsMessage?: string;
        hideEmptyState?: boolean;
        value?: any;
        isMulti?: boolean;
        getGroupHeaderLabel?: (option: any) => any;
        items?: any;
        itemHeight?: number;
        listPlacement?: string;
        listAutoWidth?: boolean;
        listOffset?: number;
        isDisabled?: boolean;
        multiFullItemClearable?: boolean;
        getSelectionLabel?: (option: any) => any;
        ClearIcon?: typeof _ClearIcon;
        loadOptions?: any;
        groupBy?: any;
        isCreatable?: boolean;
        itemFilter?: (label: any, filterText: any) => boolean;
        id?: any;
        justValue?: any;
        List?: typeof _List;
        Selection?: typeof _Selection;
        filter?: typeof _filter;
        getItems?: typeof _getItems;
        Multi?: typeof _Multi;
        ChevronIcon?: typeof _ChevronIcon;
        LoadingIcon?: typeof _LoadingIcon;
        Icon?: any;
        container?: any;
        isFocused?: boolean;
        placeholder?: string;
        placeholderAlwaysShow?: boolean;
        groupFilter?: (groups: any) => any;
        isGroupHeaderSelectable?: boolean;
        labelIdentifier?: string;
        hasError?: boolean;
        containerStyles?: string;
        createGroupHeaderItem?: (groupValue: any, item: any) => {
            value: any;
            label: any;
        };
        createItem?: (filterText: any) => {
            value: any;
            label: any;
        };
        getFilteredItems?: () => any;
        isSearchable?: boolean;
        inputStyles?: string;
        isClearable?: boolean;
        isWaiting?: boolean;
        listOpen?: boolean;
        debounce?: (fn: any, wait?: number) => void;
        debounceWait?: number;
        inputAttributes?: {};
        iconProps?: {};
        showChevron?: boolean;
        suggestions?: any;
        class?: string;
        handleClear?: () => void;
        ariaValues?: (values: any) => string;
        ariaListOpen?: (label: any, count: any) => string;
        ariaFocused?: () => string;
    };
    events: {
        change: CustomEvent<any>;
        clear: CustomEvent<any>;
        focus: CustomEvent<any>;
        blur: CustomEvent<any>;
        select: CustomEvent<any>;
        itemCreated: CustomEvent<any>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export {};
